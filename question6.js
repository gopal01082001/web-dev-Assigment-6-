// Q.6 Whats Polymorphism and Purpose of it?
// Polymorphism is a concept in object-oriented programming (OOP) that allows objects of different types to be treated as interchangeable, as long as they adhere to a common interface or share a common base class. It provides a way to write code that can work with objects of various types without explicitly knowing their specific implementations.
// The purpose of polymorphism is to promote code flexibility, reusability, and extensibility. It enables you to write generic, flexible code that can handle a variety of objects and behaviors. Here are some key aspects and benefits of polymorphism:
// Code Reusability: Polymorphism allows you to write generic code that can be reused with different types of objects. By designing classes to adhere to a common interface or inherit from a common base class, you can write code that operates on the common behaviors and characteristics shared by those objects.
// Flexibility and Extensibility: Polymorphism allows you to introduce new classes or types that conform to the existing interface or base class, without modifying the existing code. This makes it easier to extend your codebase with new functionality or variations without affecting the existing code.
// Method Overriding: Polymorphism enables method overriding, which is the ability to redefine a method in a derived class that is already defined in the base class. When you call the overridden method on an object, the appropriate implementation is automatically determined at runtime based on the actual type of the object. This allows for specialized behavior in different classes while maintaining a common interface.
// Subtyping and Inheritance: Polymorphism is closely related to inheritance, as it relies on the hierarchical relationships between classes. By inheriting from a base class, a derived class can be treated as an instance of the base class, allowing it to be used wherever the base class is expected. This supports substitutability and promotes code reuse.
// Dynamic Binding: Polymorphism relies on dynamic binding, also known as late binding or runtime polymorphism. The specific implementation of a method to be invoked is determined at runtime based on the actual type of the object, rather than at compile-time. This allows for flexibility in choosing the appropriate method implementation based on the object's runtime type.
// Code Simplicity and Readability: Polymorphism can make code more concise and readable by abstracting away the specific details of object types. It allows you to write code that operates on the common behaviors and characteristics of objects, without having to explicitly handle each object type separately.
// In summary, polymorphism enables you to write flexible, reusable, and extensible code by treating objects of different types as interchangeable entities. It promotes code simplicity, modularity, and enhances the flexibility of your software systems.




