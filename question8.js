// Q.8 Whats Encapsulation and Purpose of it ?
// Encapsulation is another important concept in object-oriented programming (OOP). It involves bundling data and methods together within a class and controlling access to that data through methods, known as getters and setters. Encapsulation helps in hiding the internal details of an object and provides a protective barrier around it.
// The purpose of encapsulation is to achieve data abstraction, information hiding, and improved code maintainability. Here are the key aspects of encapsulation and its purposes:
// Data Abstraction: Encapsulation allows the class to present a public interface (methods) to interact with the object while hiding the internal implementation details. This means that the users of the class only need to know how to use the public methods and are not concerned with the internal workings of the class. It provides a high-level view of the object's functionality, promoting simplicity and ease of use.
// Information Hiding: Encapsulation helps in protecting the internal data of an object by making it private or accessible only through controlled methods. This prevents the direct access or modification of the object's data by external code, reducing the risk of unintended manipulation and maintaining data integrity. It also allows for better control over how data is accessed and modified, enabling validation and enforcing business rules.
// Code Maintainability: Encapsulation improves code maintainability by providing a clear separation between the interface and implementation of a class. When the internal details of a class are encapsulated, changes made to the internal implementation do not affect the external code that uses the class. This allows for easier updates, modifications, and bug fixes without impacting the code that relies on the class's public interface.
// Access Control: Encapsulation allows for fine-grained control over the accessibility of class members (attributes and methods). By defining appropriate access modifiers (such as private, public, protected), encapsulation ensures that data is accessed and modified only through designated methods. This enables encapsulated classes to enforce data integrity, validate inputs, and maintain consistent behavior.
// Overall, encapsulation provides a mechanism for bundling data and methods together, controlling access to data, and achieving data abstraction and information hiding. It promotes code maintainability, enhances code reusability, and reduces dependencies on internal implementation details, making it easier to build and maintain complex software systems.




